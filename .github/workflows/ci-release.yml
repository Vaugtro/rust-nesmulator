name: Build and Release

on:
  push:
    branches:
      - main # Executa quando vocÃª fizer push na branch principal
      - "feature/**"

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract version
        id: get_version
        shell: bash
        run: |
          VERSION=$(cargo pkgid | sed 's/.*#//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: extract-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            BUILD_TARGET: x86_64-unknown-linux-gnu
            EXT: ""
          - os: windows-latest
            BUILD_TARGET: x86_64-pc-windows-msvc
            EXT: ".exe"

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - name: Check if src folder has changes
        id: changes
        shell: bash
        run: |
          echo "Checking changes in src/..."
          git fetch origin ${{ github.event.before }}
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^src/' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "build_needed=true" >> $GITHUB_ENV
          else
            echo "build_needed=false" >> $GITHUB_ENV
          fi

      - name: Build project
        if: env.build_needed == 'true'
        run: cargo build --release --target ${{ matrix.BUILD_TARGET }}

      - name: Rename binary
        if: env.build_needed == 'true'
        run: |
          mkdir -p dist
          cp target/${{ matrix.BUILD_TARGET }}/release/rust-emulas${{ matrix.EXT }} dist/rust-emulas-${{ matrix.BUILD_TARGET }}${{ matrix.EXT }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: env.build_needed == 'true'
        with:
          name: rust-emulas-${{ matrix.BUILD_TARGET }}-${{ github.ref_name }}-${{ needs.extract-version.outputs.version }}
          path: dist/
          if-no-files-found: error

  release:
    needs:
      - extract-version
      - build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Publish built binary to GitHub releases
        run: |
          gh release create ${{ needs.extract-version.outputs.version }} dist/*/* --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
